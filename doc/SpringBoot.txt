1. Spring Boot의 기본개념
1) Create stand-alone Spring application(Stand-alone으로 동작)
2) Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)
3) Provide opinionated 'starter' dependencies to simplify your build configuration(starter 라이브러리를 이용해서 모든 lib dependency 해결)
4) Automatically configure Spring and 3rd party libraries whenever possible(가능한한 자동 구성)
5) Provide production-ready features such as metrics, health checks and externalized configuration
6) Absolutely no code generation and no requirement for XML configuration

2. 개발 환경 셋팅
1) Spring Tool Suite 4  for Eclipse 다운로드 - https://spring.io/tools 
2) jar를 다운로드 받아서 zip으로 확장자 변경
3) 압축파일을 열어서 contents.zip을 복사해 와서 압축을 풀면, "sts-XX.XX.X RELEASE" 폴더 생성
4) 폴더 내의 "SpringToolSuite4.exe"를 실행하면 됨.

3. Spring boot project 생성
1) 방법1: Eclipse > New > Spring Starter Project
- 생성시, Package 명과 Artifact를 수정 후, Next 버튼(Artifact 이름으로 디렉토리가 생성)
- Web 아래에 위치한 Spring Web을 선택 후, Finish를 누른다.

2) 방법2: https://start.spring.io에서 spring initializer를 이용

4. Spring boot server의 홈디렉토리 - 두개가 존재
1) 정적파일의 홈디렉토리 => html과 css그리고, image 파일을 넣어둔다.
- src/main/resources/static

2) 동적파일의 홈디렉토리
- src/main/webapp

3) 정적파일과 동적파일의 홈디렉토리 둘다 "http://localhost:8080/파일명"으로 접근 가능

5. JSP를 Servlet으로 바꿀 수 있도록 Jasper Library를 pom.xml에 추가
<dependency>
  <groupId>org.apache.tomcat.embed</groupId>
  <artifactId>tomcat-embed-jasper</artifactId>
</dependency>

6. JSP 파일을 두는 위치.
1) 동적파일의 홈디렉토리인(src/main/webapp)에 JSP 파일이 위치하면, 웹브라우저에서 바로 접근이 가능
예) http://localhost:8080/customer/notice/detail.jsp
2) 동적파일의 홈디렉토리인(src/main/webapp)의 아래에 WEB-INF를 생성하면, 그 아래 폴더들은 웹브라우저에서 접근이 불가능
    따라서, src/main/webapp/view 폴더 아래에 JSP 파일을 위치시킨다.

7. Resource View Resolver 설정
1) NoticeController.java에서 View Resolver를 이용하면 아래와 같이 forward되는 jsp 경로를 줄일 수 있다.
@RequestMapping("list")
public String list(Model model) {
    model.addAttribute("test", "Hello~");		
    return "/WEB-INF/view/customer/notice/list.jsp";  => "customer/notice/list"로 줄일수 있다.
}

2) src/main/resources/application.properties에 아래의 view resolver 값들을 등록
 spring.mvc.view.prefix=/WEB-INF/view/
 spring.mvc.view.suffix=.jsp

2) spring-webmvc-5.3.9.jar에 존재하는 DispatcherServlet(Front Controller)에 의해서 forwarding할 때, view resolver를 위해 등록된 값을 사용.

8. DevTools 설정하기
1) 코드를 수정하고 저장하고, 변경내용을 인식해서 Spring Boot가 다시 시작함.
2) 아래의 Dependency를 pom.xml에 추가하면 됨.
 <dependency>
     <groupId>org.springframework.boot</groupId>
     <artifactId>spring-boot-devtools</artifactId>
 </dependency>
3) controller 파일을 수정하면, 자동으로 재시작됨.

9. 동일한 클래스 이름을 가진 Controller가 존재하는 경우
1) 클래스 이름을 사용해서 bean id를 내부적으로 생성하기 때문에 충돌이 발생.
2) 충돌나는 클래스에 대해서는 다른 bean id를 가지도록 지정해 주면 됨.
@Controller("adminNoticeController")
@RequestMapping("/admin/board/notice/")
public class NoticeController {
}

10. Spring Data Layer
1) Controller - Service - Dao - 각각의 Layer를 별도의 개발자들이 전문적으로 개발 후, 협업
2) Service Layer와 Dao Layer를 따로 두는 이유 - Service Layer를 구현하는 사람이 Dao Layer와 관련된 SQL을 알 필요가 없다.

11. MyBatis 설정하는 방법
1) MyBatis-Spring-Boot-Starter 역할
- Autodetect an existing Datasource
- Will create and register an instance of a SqlSessionFactory passing that DataSource as an input using the SqlSessionFactoryBean
- Will create and register an instance of a SqlSessionTemplate got out of the SqlSessionFactory
- Auto-scan your mappers, link them to the SqlSessionTemplate and register them to Spring context so they can be injected into your beans

2) project 명 오른쪽 클릭 > spring > add starters > SQL 항목의 MyBatis Framework 선택 and MySQL(Oracle) Driver 선택

3) 라이브러리 다운로드
- "mybatis-spring-boot-starter" dependency를 pom.xml에 추가
- "MyBatis-setting1.png" 파일 참조

4) application.properties에 db관련 정보 설정
- driver class name, url, username, password를 설정함.
# mysql settings
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/newlecture?serverTimezone=Asia/Seoul #MySQL의 경우, Server Timezone을 설정해야 함.
spring.datasource.username=newlecture
spring.datasource.password=111

- "MyBatis-setting2.png" 참조
- MySQL의 경우, JDBC 접속시 Server의 Timezone을 설정해 줘야 함.(Option 1을 택함)
 Option 1: JDBC 접속 문자열
 Option 2: 서버에서의 설정

5) Mapper 객체를 loc에 담기 위한 @Mapper 설정
- Dao Interface에 @Mapper를 설정하고, 각 메소드의 Annotation에 SQL Query를 사용
- "MyBatis_setting3.png" 참조
- 예) 아래와 같이 @Mapper와 @Select를 써주면, MyBatis에서 실제 구현체를 만들어서 IoC에 넣어준다.
 @Mapper
 public interface NoticeDao {
     @Select("select * from notice")
     List<Notice> getList();
     Notice get(int id);
 }

12. 스프링 객체 사용방법(Dependency와 Injection 그리고 IoC 컨테이너)
1) IoC 컨테이너 - 일반적으로 객체를 생성할 때, 큰 것에서부터 작은 순으로 만들지만, Spring Framework으로 만들면, 참조당하는 객체인 작은 것부터 큰 것 순으로 생성

13. MyBatis Column 맵핑
1) DB Table의 Column명과 Entity Class의 member 변수 명이 다를 경우
2) @Result 속성에 멤버 변수명과, 칼럼명을 지정해줌.
    @Select("select * from notice")
    @Results({
        @Result(property = "writerId", column = "WRITER_ID")
    })
    List<Notice> getList();
3) 여러개의 칼럼도 각각 맵핑 가능
    @Results({
        @Result(property = "prevId", column = "prev_id"),
        @Result(property = "nextId", column = "next_id"),
        @Result(property = "externalCode", column = "external_code")
    })
	List<Station> getStationList();    

14. XML 파일을 이용한 SQL Query RequestMapping
1) https://mybatis.org/mybatis-3/getting-started.html의 "Exploreing Mapped SQL Statements"
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.newlecture.web.dao.NoticeDao"><!-- Full name of interface -->
  <resultMap id="noticeResultMap" type="com.newlecture.web.entity.Notice">
    <result property="writerId" column="WRITER_ID"/>
  </resultMap>
  <!-- select statement, id => method name, resultType => class for one row -->
  <select id="getList" resultType="com.newlecture.web.entity.Notice" resultMap="noticeResultMap"> 
    SELECT B.ID, B.TITLE, B.WRITER_ID, B.CONTENT, B.REGDATE, B.HIT, B.FILES, B.PUB
      FROM (SELECT ROWNUM SEQ, A.*
              FROM (SELECT *
                      FROM NOTICE
                     WHERE ${field} like '%${query}%' => #{field} #{query}를 사용하면 'title'처럼 문자의 양쪽에 홑따옴표가 생김.
                     ORDER BY REGDATE DESC) A
           ) B
     WHERE B.SEQ BETWEEN #{start} AND #{end}
  </select>
  <!-- insert statement, id => method name, parameterType => method argument
  <insert id="insert" parameterType="com.newlecture.web.entity.Notice">
    insert into notice()
  </insert> -->
</mapper>





